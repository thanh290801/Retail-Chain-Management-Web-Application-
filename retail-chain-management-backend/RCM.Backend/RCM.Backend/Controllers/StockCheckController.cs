using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Linq;
using System.Collections.Generic;
using RCM.Backend.Models;

[Route("api/stock-check")]
[ApiController]
public class StockCheckController : ControllerBase
{
    private readonly RetailChainContext _context;

    public StockCheckController(RetailChainContext context)
    {
        _context = context;
    }

    /// <summary>
    /// L·∫•y danh s√°ch nh√¢n vi√™n trong kho d·ª±a v√†o BranchID t·ª´ token
    /// </summary>
    [HttpGet("employees/{branchId}")]
    public IActionResult GetEmployeesByBranch(int branchId)
    {
        var employees = _context.Employees
            .Where(e => e.BranchId == branchId)
            .Select(e => new { e.EmployeeId, e.FullName })
            .ToList();

        return Ok(employees);
    }

    /// <summary>
    /// L·∫•y danh s√°ch s·∫£n ph·∫©m trong kho
    /// </summary>
    [HttpGet("products/{warehouseId}")]
    public IActionResult GetProductsByWarehouse(int warehouseId)
    {
        var products = _context.StockLevels
            .Where(s => s.WarehouseId == warehouseId)
            .Join(_context.Products,
                  s => s.ProductId,
                  p => p.ProductsId,
                  (s, p) => new
                  {
                      p.ProductsId,
                      p.Name,
                      p.Unit,
                      s.Quantity,
                      s.MinQuantity
                  })
            .ToList();

        return Ok(products);
    }

    /// <summary>
    /// T·∫°o phi·∫øu ki·ªÉm kho v√† c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho n·∫øu c√≥ sai l·ªách
    /// </summary>
   [HttpPost("create")]
public IActionResult CreateStockAudit([FromBody] StockAuditRequest request)
{
    if (request == null || request.Products == null || request.Products.Count == 0)
    {
        return BadRequest("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.");
    }

    using (var transaction = _context.Database.BeginTransaction())
    {
        try
        {
            // üîπ T·∫°o phi·∫øu ki·ªÉm kho
            var auditRecord = new StockAuditRecord
            {
                WarehouseId = request.WarehouseId,
                AuditorId = request.AuditorId,
                CoAuditorId = request.CoAuditorId,
                AuditDate = DateTime.UtcNow
            };
            _context.StockAuditRecords.Add(auditRecord);
            _context.SaveChanges(); // üî• L∆∞u ngay ƒë·ªÉ l·∫•y ID

            var auditDetails = new List<StockAuditDetail>();
            var adjustmentDetails = new List<StockAdjustmentDetail>();

            // üîπ Ki·ªÉm tra s·∫£n ph·∫©m v√† c·∫≠p nh·∫≠t t·ªìn kho
            foreach (var item in request.Products)
            {
                var stock = _context.StockLevels
                    .FirstOrDefault(s => s.WarehouseId == request.WarehouseId && s.ProductId == item.ProductId);
                
                if (stock == null) continue;

                auditDetails.Add(new StockAuditDetail
                {
                    AuditId = auditRecord.StockAuditRecordsId,
                    ProductId = item.ProductId,
                    RecordedQuantity = item.RecordedQuantity
                });

                // N·∫øu s·ªë l∆∞·ª£ng th·ª±c t·∫ø kh√°c s·ªë l∆∞·ª£ng h·ªá th·ªëng, t·∫°o phi·∫øu ƒëi·ªÅu ch·ªânh
                if (stock.Quantity != item.RecordedQuantity)
                {
                    // üî• Ki·ªÉm tra xem ƒë√£ c√≥ phi·∫øu ƒëi·ªÅu ch·ªânh cho kho n√†y ch∆∞a
                    var adjustment = _context.StockAdjustments
                        .FirstOrDefault(a => a.WarehouseId == request.WarehouseId && a.AuditorId == request.AuditorId);
                    
                    if (adjustment == null)
                    {
                        // üîπ T·∫°o phi·∫øu ƒëi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng
adjustment = new StockAdjustment
{
    WarehouseId = request.WarehouseId,
    AuditorId = request.AuditorId,
    AdjustmentDate = DateTime.UtcNow,
    Notes = "Sai l·ªách ki·ªÉm kho"
};

// üîπ L∆∞u v√†o database ƒë·ªÉ nh·∫≠n ID m·ªõi
_context.StockAdjustments.Add(adjustment);
_context.SaveChanges();
Console.WriteLine($"‚úÖ StockAdjustment Created - ID: {adjustment.StockAdjustmentsId}");

// üõ† Ki·ªÉm tra n·∫øu ID v·∫´n null
if (adjustment.StockAdjustmentsId == 0)
{
    return StatusCode(500, new { message = "L·ªói khi l·∫•y ID phi·∫øu ƒëi·ªÅu ch·ªânh t·ª´ database." });
}

                    }

                    // üîπ L∆∞u v√†o `stock_adjustment_details`
                    adjustmentDetails.Add(new StockAdjustmentDetail
                    {
                        AdjustmentId = adjustment.StockAdjustmentsId,
                        ProductId = item.ProductId,
                        PreviousQuantity = stock.Quantity,
                        AdjustedQuantity = item.RecordedQuantity,
                        Reason = "Sai l·ªách ki·ªÉm kho"
                    });

                    // üîπ C·∫≠p nh·∫≠t l·∫°i s·ªë l∆∞·ª£ng t·ªìn kho
                    stock.Quantity = item.RecordedQuantity;
                }
            }

            // üîπ L∆∞u danh s√°ch v√†o b·∫£ng
            _context.StockAuditDetails.AddRange(auditDetails);
            _context.StockAdjustmentDetails.AddRange(adjustmentDetails);
            _context.SaveChanges();

            transaction.Commit();
            
            return Ok(new 
{ 
    message = "Phi·∫øu ki·ªÉm kho ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.", 
    stockAuditRecordsId = auditRecord.StockAuditRecordsId,
    stockAdjustmentsId = adjustmentDetails.Any() ? (int?)adjustmentDetails.First().AdjustmentId : null,
    adjustedProductCount = adjustmentDetails.Count 
});

        }
        catch (Exception ex)
        {
            transaction.Rollback();
            return StatusCode(500, new { message = "L·ªói khi l∆∞u d·ªØ li·ªáu.", error = ex.InnerException?.Message ?? ex.Message });
        }
    }
}

/// <summary>
/// L∆∞u ƒëi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng t·ª´ phi·∫øu ki·ªÉm kho
/// </summary>
[HttpPut("adjustments/update")]
public IActionResult UpdateStockAdjustments([FromBody] StockAdjustmentRequest request)
{
    if (request == null || request.Products == null || request.Products.Count == 0)
    {
        return BadRequest(new { message = "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.", error = "Payload tr·ªëng ho·∫∑c kh√¥ng c√≥ s·∫£n ph·∫©m." });
    }

    using (var transaction = _context.Database.BeginTransaction())
    {
        try
        {
            Console.WriteLine("üì• Nh·∫≠n d·ªØ li·ªáu t·ª´ FE: " + Newtonsoft.Json.JsonConvert.SerializeObject(request));

            // üîç Ki·ªÉm tra xem phi·∫øu ƒëi·ªÅu ch·ªânh c√≥ t·ªìn t·∫°i kh√¥ng
            var adjustment = _context.StockAdjustments
                .FirstOrDefault(a => a.StockAdjustmentsId == request.AdjustmentId);

            if (adjustment == null)
            {
                return NotFound(new { message = "Kh√¥ng t√¨m th·∫•y phi·∫øu ƒëi·ªÅu ch·ªânh." });
            }

            // ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin chung c·ªßa phi·∫øu ƒëi·ªÅu ch·ªânh
            adjustment.Notes = "ƒêi·ªÅu ch·ªânh do ki·ªÉm k√™";
            adjustment.AdjustmentDate = DateTime.UtcNow;

            // ‚úÖ Duy·ªát qua t·ª´ng s·∫£n ph·∫©m v√† c·∫≠p nh·∫≠t
            foreach (var item in request.Products)
            {
                var detail = _context.StockAdjustmentDetails
                    .FirstOrDefault(d => d.AdjustmentId == request.AdjustmentId && d.ProductId == item.ProductId);

                if (detail != null)
                {
                    // üîπ N·∫øu ƒë√£ c√≥ -> C·∫≠p nh·∫≠t
                    detail.PreviousQuantity = item.PreviousQuantity;
                    detail.AdjustedQuantity = item.AdjustedQuantity;
                    detail.Reason = string.IsNullOrWhiteSpace(item.Reason) ? "Sai l·ªách ki·ªÉm kho" : item.Reason;
                }
            }

            // ‚úÖ L∆∞u thay ƒë·ªïi
            _context.SaveChanges();
            transaction.Commit();

            return Ok(new { message = "Phi·∫øu ƒëi·ªÅu ch·ªânh ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng." });
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            return StatusCode(500, new { message = "L·ªói khi c·∫≠p nh·∫≠t ƒëi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng.", error = ex.Message });
        }
    }
}


/// <summary>
/// L·∫•y danh s√°ch s·∫£n ph·∫©m c√≥ ƒëi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng t·ª´ m·ªôt phi·∫øu ki·ªÉm kho
/// </summary>
[HttpGet("adjustments/{adjustmentId}")]
public IActionResult GetStockAdjustmentDetails(int adjustmentId)
{
    var adjustment = _context.StockAdjustments
        .Where(a => a.StockAdjustmentsId == adjustmentId)
        .Select(a => new
        {
            a.StockAdjustmentsId,
            a.WarehouseId,
            a.AuditorId,
            a.AdjustmentDate,
            a.Notes,
            Products = _context.StockAdjustmentDetails
                .Where(d => d.AdjustmentId == adjustmentId)
                .Join(_context.Products,
                      d => d.ProductId,
                      p => p.ProductsId,
                      (d, p) => new
                      {
                          d.ProductId,
                          ProductName = p.Name,
                          d.PreviousQuantity,
                          d.AdjustedQuantity,
                          d.Reason
                      })
                .ToList()
        })
        .FirstOrDefault();

    if (adjustment == null)
    {
        return NotFound("Kh√¥ng t√¨m th·∫•y phi·∫øu ƒëi·ªÅu ch·ªânh.");
    }

    return Ok(new
{
    StockAdjustmentsId = adjustment.StockAdjustmentsId,
    WarehouseId = adjustment.WarehouseId,
    AuditorId = adjustment.AuditorId,
    AdjustmentDate = adjustment.AdjustmentDate,
    Notes = adjustment.Notes,
    Products = _context.StockAdjustmentDetails
        .Where(d => d.AdjustmentId == adjustmentId)
        .Join(_context.Products,
              d => d.ProductId,
              p => p.ProductsId,
              (d, p) => new
              {
                  ProductId = d.ProductId,
                  ProductName = p.Name,
                  PreviousQuantity = d.PreviousQuantity,
                  AdjustedQuantity = d.AdjustedQuantity,
                  Reason = d.Reason
              })
        .ToList()
});

}

    // **Models Request**
    public class StockAuditRequest
    {
        public int WarehouseId { get; set; }
        public int AuditorId { get; set; }
        public int? CoAuditorId { get; set; }
        public List<StockAuditDetailRequest> Products { get; set; }
    }

    public class StockAuditDetailRequest
    {
        public int ProductId { get; set; }
        public int RecordedQuantity { get; set; }
    }

    public class StockAdjustmentRequest
{
    public int AdjustmentId { get; set; } // ‚úÖ Th√™m thu·ªôc t√≠nh n√†y
    public int WarehouseId { get; set; }
    public int AuditorId { get; set; }
    public List<StockAdjustmentDetailRequest> Products { get; set; }
}


public class StockAdjustmentDetailRequest
{
    public int ProductId { get; set; } // ‚úÖ ƒê·∫£m b·∫£o ƒë√¢y l√† ki·ªÉu int
    public int PreviousQuantity { get; set; }
    public int AdjustedQuantity { get; set; }
    public string Reason { get; set; }
}

}
