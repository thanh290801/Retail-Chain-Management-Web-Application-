import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Card, Table, Form, Row, Col, Modal, Button } from 'react-bootstrap';
import { useLocation } from 'react-router-dom';

const OrderList = () => {
    const location = useLocation();
    const queryParams = new URLSearchParams(location.search);

    const [orders, setOrders] = useState([]);
    const [paymentFilter, setPaymentFilter] = useState(queryParams.get('paymentMethod') || '');
    const branchId = queryParams.get('branchId') || '';
    const [fromDate] = useState(queryParams.get('fromDate') || '');
    const [toDate] = useState(queryParams.get('toDate') || '');
    const [selectedOrder, setSelectedOrder] = useState(null);
    const [showModal, setShowModal] = useState(false);

    useEffect(() => {
        fetchOrders();
    }, [paymentFilter]);

    const fetchOrders = async () => {
        try {
            const params = { paymentMethod: paymentFilter };
            if (branchId) params.branchId = branchId;
            if (fromDate) params.fromDate = fromDate;
            if (toDate) params.toDate = toDate;

            const response = await axios.get('https://localhost:5000/api/sale-invoice/list', { params });
            setOrders(groupByOrder(response.data));
        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫£i danh s√°ch ƒë∆°n h√†ng:', error);
        }
    };

    const groupByOrder = (data) => {
        const grouped = {};
        data.forEach(row => {
            if (!grouped[row.orderId]) {
                grouped[row.orderId] = {
                    ...row,
                    details: [],
                    refund: null // Th√™m tr∆∞·ªùng refund ƒë·ªÉ l∆∞u th√¥ng tin ho√†n ti·ªÅn
                };
            }
            grouped[row.orderId].details.push({
                productId: row.product_id,
                product_name: row.product_name || 'Kh√¥ng c√≥ t√™n s·∫£n ph·∫©m',
                quantity: row.quantity || 0,
                unitPrice: row.unit_price || 0,
                totalPrice: row.total_price || 0
            });

            // N·∫øu c√≥ th√¥ng tin ho√†n ti·ªÅn th√¨ l∆∞u v√†o tr∆∞·ªùng refund
            if (row.refund_id) {
                grouped[row.orderId].refund = {
                    refundId: row.refund_id,
                    refundDate: row.refund_date,
                    refundProductId: row.refund_product_id,
                    refundQuantity: row.refund_quantity,
                    refundTotalPrice: row.refund_total_price
                };
            }
        });
        return Object.values(grouped);
    };

    const handleShowModal = (order) => {
        setSelectedOrder(order);
        setShowModal(true);
    };

    return (
        <Card className="p-3 mt-3">
            <h4 className="mb-3">üìã Danh s√°ch ƒë∆°n h√†ng</h4>

            <Row className="mb-3">
                <Col md={4}>
                    <Form.Select value={paymentFilter} onChange={(e) => setPaymentFilter(e.target.value)}>
                        <option value="">T·∫•t c·∫£ ph∆∞∆°ng th·ª©c</option>
                        <option value="cash">Ti·ªÅn m·∫∑t</option>
                        <option value="transfer">Chuy·ªÉn kho·∫£n</option>
                    </Form.Select>
                </Col>
            </Row>

            <Table striped bordered hover responsive>
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Ng√†y t·∫°o</th>
                        <th>Nh√¢n vi√™n</th>
                        <th>T·ªïng ti·ªÅn</th>
                        <th>Chi ti·∫øt</th>
                    </tr>
                </thead>
                <tbody>
                    {orders.map((order, idx) => (
                        <tr key={order.orderId}>
                            <td>{idx + 1}</td>
                            <td>{new Date(order.created_date).toLocaleString()}</td>
                            <td>{order.employee_name}</td>
                            <td>{order.total_amount.toLocaleString()} VND</td>
                            <td>
                                <Button variant="info" size="sm" onClick={(e) => { e.stopPropagation(); handleShowModal(order); }}>
                                    Xem
                                </Button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </Table>

            {/* Modal Chi ti·∫øt ƒë∆°n h√†ng */}
            <Modal show={showModal} onHide={() => setShowModal(false)} size="lg">
                <Modal.Header closeButton>
                    <Modal.Title>Chi ti·∫øt ƒë∆°n h√†ng #{selectedOrder?.orderId}</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    {selectedOrder && (
                        <>
                            <p><strong>Ng√†y t·∫°o:</strong> {new Date(selectedOrder.created_date).toLocaleString()}</p>
                            <p><strong>Chi nh√°nh:</strong> {selectedOrder.warehouse}</p>
                            <p><strong>Nh√¢n vi√™n:</strong> {selectedOrder.employee_name}</p>
                            <p><strong>T·ªïng ti·ªÅn:</strong> {selectedOrder.total_amount.toLocaleString()} VND</p>

                            <h5 className="mt-4">S·∫£n ph·∫©m:</h5>
                            <Table striped bordered>
                                <thead>
                                    <tr>
                                        <th>S·∫£n ph·∫©m</th>
                                        <th>S·ªë l∆∞·ª£ng</th>
                                        <th>ƒê∆°n gi√°</th>
                                        <th>T·ªïng</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {selectedOrder.details.map((item, index) => (
                                        <tr key={index}>
                                            <td>{item.product_name}</td>
                                            <td>{item.quantity}</td>
                                            <td>{item.unitPrice.toLocaleString()} VND</td>
                                            <td>{item.totalPrice.toLocaleString()} VND</td>
                                        </tr>
                                    ))}
                                </tbody>
                            </Table>

                            {/* Hi·ªÉn th·ªã th√¥ng tin Refund n·∫øu c√≥ */}
                            {/* {selectedOrder.refund && (
                                <>
                                    <h5 className="mt-4">Th√¥ng tin ho√†n ti·ªÅn:</h5>
                                    <p><strong>Ng√†y ho√†n ti·ªÅn:</strong> {new Date(selectedOrder.refund.refundDate).toLocaleString()}</p>
                                    <p><strong>S·∫£n ph·∫©m ho√†n ti·ªÅn:</strong> SP #{selectedOrder.refund.refundProductId}</p>
                                    <p><strong>S·ªë l∆∞·ª£ng ho√†n ti·ªÅn:</strong> {selectedOrder.refund.refundQuantity}</p>
                                    <p><strong>T·ªïng ti·ªÅn ho√†n ti·ªÅn:</strong> {selectedOrder.refund.refundTotalPrice.toLocaleString()} VND</p>
                                </>
                            )} */}
                        </>
                    )}
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={() => setShowModal(false)}>ƒê√≥ng</Button>
                </Modal.Footer>
            </Modal>
        </Card>
    );
};

export default OrderList;
