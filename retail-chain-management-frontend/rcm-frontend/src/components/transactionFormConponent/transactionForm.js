import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";

const API_URL = "https://localhost:5000/api/CashHandover";
const EMPLOYEE_API = "https://localhost:5000/api/Account/all"; // API l·∫•y danh s√°ch nh√¢n vi√™n
const USER_INFO_API = "https://localhost:5000/api/Account/me"; // API l·∫•y th√¥ng tin ng∆∞·ªùi d√πng

const CashHandover = () => {
    const navigate = useNavigate();
    const [employees, setEmployees] = useState([]); // Danh s√°ch nh√¢n vi√™n
    const [userInfo, setUserInfo] = useState(null); // Th√¥ng tin ng∆∞·ªùi l·∫≠p phi·∫øu

    const [handover, setHandover] = useState({
        createdBy: 0,  // ID ng∆∞·ªùi t·∫°o phi·∫øu (l·∫•y t·ª´ userInfo)
        employeeID: 0, // Nh√¢n vi√™n b√†n giao
        receiverID: "", // Nh√¢n vi√™n nh·∫≠n (ho·∫∑c ch·ªçn "Kh√°c")
        branchID: 0,   // Chi nh√°nh th·ª±c hi·ªán b√†n giao
        amount: 0.00,  // S·ªë ti·ªÅn b√†n giao
        transactionType: "Thu", // M·∫∑c ƒë·ªãnh l√† "Thu"
        description: "",
        personName: "", // N·∫øu ch·ªçn "Kh√°c" trong receiverID
        note: "",
    });

    // üõ† L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ token
    const fetchUserInfo = async () => {
        try {
            const token = localStorage.getItem("token");
            if (!token) {
                console.error("‚ùå Kh√¥ng c√≥ token! Ng∆∞·ªùi d√πng c√≥ th·ªÉ ch∆∞a ƒëƒÉng nh·∫≠p.");
                return;
            }

            const response = await axios.get(USER_INFO_API, {
                headers: { Authorization: `Bearer ${token}` }
            });

            console.log("‚úÖ Th√¥ng tin ng∆∞·ªùi d√πng:", response.data);
            setUserInfo(response.data);

            // G√°n ID ng∆∞·ªùi l·∫≠p phi·∫øu v√†o handover
            setHandover(prev => ({
                ...prev,
                createdBy: response.data.EmployeeId
            }));

        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", error.response ? error.response.data : error);
        }
    };

    // üõ† L·∫•y danh s√°ch nh√¢n vi√™n
    useEffect(() => {
        fetchUserInfo();
        axios.get(EMPLOYEE_API)
            .then(response => {
                setEmployees(response.data);
            })
            .catch(error => console.error("‚ùå L·ªói l·∫•y danh s√°ch nh√¢n vi√™n:", error));
    }, []);

    // X·ª≠ l√Ω nh·∫≠p li·ªáu
    const handleChange = (e) => {
        const { name, value } = e.target;

        setHandover(prev => ({
            ...prev,
            [name]: ["amount", "branchID", "createdBy", "employeeID", "receiverID"].includes(name)
                ? parseInt(value) || 0  // ‚úÖ ƒê·∫£m b·∫£o ki·ªÉu s·ªë
                : value
        }));
    };


    // X·ª≠ l√Ω khi ch·ªçn ng∆∞·ªùi nh·∫≠n b√†n giao
    const handleReceiverChange = (e) => {
        const value = e.target.value;
        setHandover(prev => ({
            ...prev,
            receiverID: value === "Kh√°c" ? 0 : parseInt(value) || 0, // ƒê·∫£m b·∫£o ki·ªÉu s·ªë
            personName: value === "Kh√°c" ? "" : prev.personName
        }));
    };

    // T·∫°o phi·∫øu b√†n giao
    const handleSubmit = async (e) => {
        e.preventDefault();

        console.log("üì© D·ªØ li·ªáu g·ª≠i l√™n API:", JSON.stringify(handover, null, 2)); // ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i

        try {
            const response = await axios.post(API_URL, handover, {
                headers: { "Content-Type": "application/json" }
            });
            alert("‚úÖ Phi·∫øu b√†n giao ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
            navigate("/cashBook");
        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫°o phi·∫øu:", error.response?.data || error);
            alert(`L·ªói khi t·∫°o phi·∫øu: ${JSON.stringify(error.response?.data)}`);
        }
    };



    return (
        <div className="p-6">
            <h2 className="text-2xl font-bold mb-4">üìù T·∫°o Phi·∫øu B√†n Giao Ti·ªÅn M·∫∑t</h2>

            <form onSubmit={handleSubmit} className="p-4 border rounded shadow">
                <div className="grid grid-cols-2 gap-4">
                    {/* Ng∆∞·ªùi t·∫°o phi·∫øu (hi·ªÉn th·ªã, kh√¥ng ch·ªânh s·ª≠a) */}
                    <div>
                        <label>üë§ Ng∆∞·ªùi t·∫°o phi·∫øu</label>
                        <input
                            type="text"
                            value={userInfo ? userInfo.fullname : ""}
                            disabled
                            className="w-full border p-2 rounded bg-gray-100"
                        />
                    </div>

                    {/* Nh√¢n vi√™n b√†n giao */}
                    <div>
                        <label>üìå Nh√¢n vi√™n b√†n giao</label>
                        <select name="employeeID" onChange={handleChange} required className="w-full border p-2 rounded">
                            <option value="">-- Ch·ªçn nh√¢n vi√™n --</option>
                            {employees.map(emp => (
                                <option key={emp.EmployeeId} value={emp.EmployeeId}>{emp.fullName}</option>
                            ))}
                        </select>
                    </div>

                    {/* Nh√¢n vi√™n nh·∫≠n */}
                    <div>
                        <label>‚úÖ Nh√¢n vi√™n nh·∫≠n</label>
                        <select name="receiverID" onChange={handleReceiverChange} required className="w-full border p-2 rounded">
                            <option value="">-- Ch·ªçn nh√¢n vi√™n ho·∫∑c "Kh√°c" --</option>
                            {employees.map(emp => (
                                <option key={emp.EmployeeId} value={emp.EmployeeId}>{emp.fullName}</option>
                            ))}
                            <option value="Kh√°c">Kh√°c</option>
                        </select>
                    </div>

                    {/* N·∫øu ch·ªçn "Kh√°c", nh·∫≠p t√™n ng∆∞·ªùi nh·∫≠n */}
                    {handover.receiverID === "" && (
                        <div>
                            <label>üë§ T√™n ng∆∞·ªùi nh·∫≠n b√™n ngo√†i</label>
                            <input
                                type="text"
                                name="personName"
                                onChange={handleChange}
                                className="w-full border p-2 rounded"
                                required
                            />
                        </div>
                    )}

                    <div>
                        <label>üè¢ Chi nh√°nh</label>
                        <input type="number" name="branchID" onChange={handleChange} required className="w-full border p-2 rounded" />
                    </div>
                    <div>
                        <label>üí∞ S·ªë ti·ªÅn</label>
                        <input type="number" name="amount" onChange={handleChange} required className="w-full border p-2 rounded" />
                    </div>
                    <div>
                        <label>üîÑ Lo·∫°i giao d·ªãch</label>
                        <select name="transactionType" value={handover.transactionType} onChange={handleChange} className="w-full border p-2 rounded">
                            <option value="Thu">Thu</option>
                            <option value="Chi">Chi</option>
                        </select>
                    </div>
                    <div>
                        <label>üìù Ghi ch√∫</label>
                        <input type="text" name="description" onChange={handleChange} className="w-full border p-2 rounded" />
                    </div>
                </div>
                <div className="mt-4 flex gap-4">
                    <button type="submit" className="px-4 py-2 bg-blue-500 text-white rounded">‚úÖ T·∫°o Phi·∫øu</button>
                    <button type="button" onClick={() => navigate("/cashBook")} className="px-4 py-2 bg-gray-400 text-white rounded">‚ùå H·ªßy</button>
                </div>
            </form>
        </div>
    );
};

export default CashHandover;
